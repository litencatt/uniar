// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: member.sql

package repository

import (
	"context"
)

const getAllMembers = `-- name: GetAllMembers :many
;

SELECT
	id, name, first_name, group_id, phase, graduated, created_at
FROM
	members m
ORDER BY
	m.group_id, m.phase, m.first_name asc
`

func (q *Queries) GetAllMembers(ctx context.Context, db DBTX) ([]Member, error) {
	rows, err := db.QueryContext(ctx, getAllMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FirstName,
			&i.GroupID,
			&i.Phase,
			&i.Graduated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembers = `-- name: GetMembers :many
SELECT
	g.name AS group_name,
	m.name,
	m.phase,
	m.graduated
FROM
	members m
	JOIN groups g ON m.group_id = g.id
ORDER BY
	g.id, m.phase, m.first_name asc
`

type GetMembersRow struct {
	GroupName string
	Name      string
	Phase     int64
	Graduated int64
}

func (q *Queries) GetMembers(ctx context.Context, db DBTX) ([]GetMembersRow, error) {
	rows, err := db.QueryContext(ctx, getMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembersRow
	for rows.Next() {
		var i GetMembersRow
		if err := rows.Scan(
			&i.GroupName,
			&i.Name,
			&i.Phase,
			&i.Graduated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembersByGroup = `-- name: GetMembersByGroup :many
;

SELECT
	m.id,
	m.name
FROM
	members m
WHERE
	group_id = ?
ORDER BY
	m.phase, m.first_name asc
`

type GetMembersByGroupRow struct {
	ID   int64
	Name string
}

func (q *Queries) GetMembersByGroup(ctx context.Context, db DBTX, groupID int64) ([]GetMembersByGroupRow, error) {
	rows, err := db.QueryContext(ctx, getMembersByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembersByGroupRow
	for rows.Next() {
		var i GetMembersByGroupRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
