// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: member.sql

package repository

import (
	"context"
)

const getMembers = `-- name: GetMembers :many
SELECT
	g. ` + "`" + `name` + "`" + ` AS ` + "`" + `group` + "`" + `,
	m.id AS member_id,
	m. ` + "`" + `name` + "`" + `,
	m.phase,
	m.graduated
FROM
	members m
	JOIN ` + "`" + `groups` + "`" + ` g ON m.group_id = g.id
`

type GetMembersRow struct {
	Group     string
	MemberID  int32
	Name      string
	Phase     int32
	Graduated bool
}

func (q *Queries) GetMembers(ctx context.Context, db DBTX) ([]GetMembersRow, error) {
	rows, err := db.QueryContext(ctx, getMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembersRow
	for rows.Next() {
		var i GetMembersRow
		if err := rows.Scan(
			&i.Group,
			&i.MemberID,
			&i.Name,
			&i.Phase,
			&i.Graduated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
