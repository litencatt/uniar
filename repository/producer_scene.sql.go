// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: producer_scene.sql

package repository

import (
	"context"
	"database/sql"
)

const getProducerScenes = `-- name: GetProducerScenes :many
SELECT
    ps.id,
	c.name AS color,
	p.name AS photograph,
	m.name AS member,
	s.ssr_plus,
	ps.have
FROM
	producer_scenes ps
	JOIN photograph p ON ps.photograph_id = p.id
	JOIN members m ON ps.member_id = m.id
	JOIN scenes s ON ps.photograph_id = s.photograph_id
		AND ps.member_id = s.member_id
	JOIN color_types c ON s.color_type_id = c.id
ORDER BY
	ps.photograph_id,
	m.phase,
	m.first_name
`

type GetProducerScenesRow struct {
	ID         int64
	Color      string
	Photograph string
	Member     string
	SsrPlus    int64
	Have       sql.NullInt64
}

func (q *Queries) GetProducerScenes(ctx context.Context, db DBTX) ([]GetProducerScenesRow, error) {
	rows, err := db.QueryContext(ctx, getProducerScenes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProducerScenesRow
	for rows.Next() {
		var i GetProducerScenesRow
		if err := rows.Scan(
			&i.ID,
			&i.Color,
			&i.Photograph,
			&i.Member,
			&i.SsrPlus,
			&i.Have,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProducerScene = `-- name: UpdateProducerScene :exec
;

UPDATE producer_scenes SET have = ? WHERE id = ?
`

type UpdateProducerSceneParams struct {
	Have sql.NullInt64
	ID   int64
}

func (q *Queries) UpdateProducerScene(ctx context.Context, db DBTX, arg UpdateProducerSceneParams) error {
	_, err := db.ExecContext(ctx, updateProducerScene, arg.Have, arg.ID)
	return err
}
