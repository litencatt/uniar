// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: producer_scene.sql

package repository

import (
	"context"
)

const getProducerScenes = `-- name: GetProducerScenes :many
SELECT
    ps.producer_id,
    ps.scene_id,
    c.name AS color,
    p.name AS photograph,
    m.name AS member,
    s.ssr_plus,
    ps.have
FROM
    producer_scenes ps
    JOIN scenes s ON ps.scene_id = s.id
    JOIN photograph p on s.photograph_id = p.id
    JOIN members m on s.member_id = m.id
    JOIN color_types c ON s.color_type_id = c.id
ORDER BY
    p.id,
    m.phase,
    m.first_name
`

type GetProducerScenesRow struct {
	ProducerID int64
	SceneID    int64
	Color      string
	Photograph string
	Member     string
	SsrPlus    int64
	Have       int64
}

func (q *Queries) GetProducerScenes(ctx context.Context, db DBTX) ([]GetProducerScenesRow, error) {
	rows, err := db.QueryContext(ctx, getProducerScenes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProducerScenesRow
	for rows.Next() {
		var i GetProducerScenesRow
		if err := rows.Scan(
			&i.ProducerID,
			&i.SceneID,
			&i.Color,
			&i.Photograph,
			&i.Member,
			&i.SsrPlus,
			&i.Have,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrUpdateProducerScene = `-- name: InsertOrUpdateProducerScene :exec
;

INSERT OR REPLACE INTO producer_scenes (
	producer_id,
	scene_id,
    have
) VALUES (?, ?, ?)
`

type InsertOrUpdateProducerSceneParams struct {
	ProducerID int64
	SceneID    int64
	Have       int64
}

func (q *Queries) InsertOrUpdateProducerScene(ctx context.Context, db DBTX, arg InsertOrUpdateProducerSceneParams) error {
	_, err := db.ExecContext(ctx, insertOrUpdateProducerScene, arg.ProducerID, arg.SceneID, arg.Have)
	return err
}

const registProducerScene = `-- name: RegistProducerScene :exec
;

INSERT OR IGNORE INTO producer_scenes (
	producer_id,
	scene_id
) VALUES (?, ?)
`

type RegistProducerSceneParams struct {
	ProducerID int64
	SceneID    int64
}

func (q *Queries) RegistProducerScene(ctx context.Context, db DBTX, arg RegistProducerSceneParams) error {
	_, err := db.ExecContext(ctx, registProducerScene, arg.ProducerID, arg.SceneID)
	return err
}
