// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: collection.sql

package repository

import (
	"context"
	"database/sql"
)

const getCollections = `-- name: GetCollections :many
SELECT
	p. ` + "`" + `name` + "`" + ` AS photograph,
	m. ` + "`" + `name` + "`" + ` AS member,
	c.name AS color,
	s.ssr_plus,
	s.expected_value AS expected_value
FROM
	producer_scenes ps
	JOIN photograph p ON ps.photograph_id = p.id
	JOIN members m ON ps.member_id = m.id
	LEFT OUTER JOIN scenes s ON p.id = s.photograph_id
		AND m.id = s.member_id
	JOIN color_types c ON s.color_type_id = c.id
WHERE
	have = 1
	AND expected_value IS NOT NULL
ORDER BY
	s.expected_value DESC
`

type GetCollectionsRow struct {
	Photograph    string
	Member        string
	Color         string
	SsrPlus       bool
	ExpectedValue sql.NullString
}

func (q *Queries) GetCollections(ctx context.Context, db DBTX) ([]GetCollectionsRow, error) {
	rows, err := db.QueryContext(ctx, getCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionsRow
	for rows.Next() {
		var i GetCollectionsRow
		if err := rows.Scan(
			&i.Photograph,
			&i.Member,
			&i.Color,
			&i.SsrPlus,
			&i.ExpectedValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionsWithColor = `-- name: GetCollectionsWithColor :many
SELECT
	p. ` + "`" + `name` + "`" + ` AS photograph,
	m. ` + "`" + `name` + "`" + ` AS member,
	c.name AS color,
	s.ssr_plus,
	s.expected_value AS expected_value
FROM
	producer_scenes ps
	JOIN photograph p ON ps.photograph_id = p.id
	JOIN members m ON ps.member_id = m.id
	LEFT OUTER JOIN scenes s ON p.id = s.photograph_id
		AND m.id = s.member_id
	JOIN color_types c ON s.color_type_id = c.id
WHERE
	have = 1
	AND c.name = ?
ORDER BY
	s.expected_value DESC
`

type GetCollectionsWithColorRow struct {
	Photograph    string
	Member        string
	Color         string
	SsrPlus       bool
	ExpectedValue sql.NullString
}

func (q *Queries) GetCollectionsWithColor(ctx context.Context, db DBTX, name string) ([]GetCollectionsWithColorRow, error) {
	rows, err := db.QueryContext(ctx, getCollectionsWithColor, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionsWithColorRow
	for rows.Next() {
		var i GetCollectionsWithColorRow
		if err := rows.Scan(
			&i.Photograph,
			&i.Member,
			&i.Color,
			&i.SsrPlus,
			&i.ExpectedValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
