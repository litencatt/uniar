// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: photograph.sql

package repository

import (
	"context"
)

const getPhotographList = `-- name: GetPhotographList :many
SELECT
	id, name
FROM
	photograph
WHERE group_id = ? AND photo_type = ?
ORDER BY group_id, id ASC
`

type GetPhotographListParams struct {
	GroupID   int32
	PhotoType string
}

type GetPhotographListRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetPhotographList(ctx context.Context, db DBTX, arg GetPhotographListParams) ([]GetPhotographListRow, error) {
	rows, err := db.QueryContext(ctx, getPhotographList, arg.GroupID, arg.PhotoType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPhotographListRow
	for rows.Next() {
		var i GetPhotographListRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registPhotograph = `-- name: RegistPhotograph :exec
INSERT INTO photograph (name, group_id, photo_type) VALUES (?, ?, ?)
`

type RegistPhotographParams struct {
	Name      string
	GroupID   int32
	PhotoType string
}

func (q *Queries) RegistPhotograph(ctx context.Context, db DBTX, arg RegistPhotographParams) error {
	_, err := db.ExecContext(ctx, registPhotograph, arg.Name, arg.GroupID, arg.PhotoType)
	return err
}
